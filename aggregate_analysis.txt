
AGGREGATE ANALYSIS

AllInputColumnsEqual 4
[
[ '28e73c20' ],   // Inputs are all black, outputs are not; InputAndOutputGridsHaveTheSameDimensions; grids all different sizes;  green spirals
[ '496994bd' ],   // also has InputAndOutputGridsHaveTheSameDimensions;
[ '6f8cd79b' ],   // input columns all black, so AllInputRowsEqual;  InputAndOutputGridsHaveTheSameDimensions; adds light blue border to each;
[ 'e9afcf9a' ]    // col height = 2, 2-colors; InputAndOutputGridsHaveTheSameDimensions; all samples have same dimensions; checkered flag.
]

AllInputRowsEqual 6 [
  [ '0d3d703e' ],  // all inputs & outputs squares, InputAndOutputGridsHaveTheSameDimensions, color replacement
  [ '28e73c20' ],  // Inputs are all black, outputs are not; InputAndOutputGridsHaveTheSameDimensions; grids all different sizes;  green spirals
  [ '3bd67248' ],  // all squares with leftmost column uniform non-black; add red diagonal and yellow base
  [ '6f8cd79b' ],  // input columns all black, so AllInputColumnsEqual;  InputAndOutputGridsHaveTheSameDimensions; adds light blue border to each;
  [ 'bbc9ae5d' ],  // inputs all single row; row becomes first row of output (OutputRowMatchAnyRowsOfTheInput) which adds rows as step increases
  [ 'feca6190' ]   // all inputs 1x5 with color pattern; all outputs squares, multiples of 5; input used to step up diagonally through black output
]

OutputRowMatchAnyRowsOfTheInput 1
[ [ 'bbc9ae5d' ] ]  // inputs all single row (AllInputRowsEqual); row becomes first row of output which adds rows as step increases

InputSquareAndOutputNotSquare 10 [
  [ '1190e5a7' ],  // solved purely by noting colors: input 2 colors, output one the two colors,
  [ '1fad071e' ],  // need to count 2x2 blue squares in 9x9 input and have one blue cell for each in 5x1 output
  [ '28bf18c6' ],  // replicate solitary single shape in 8x8 input 2 times into 3x6 output; all are different colors
  [ '6d0aefbc' ],  // mirror flip horizontally input square and append to input to the right (same as c9e6f938)
  [ '6fa7a44f' ],  // mirror flip vertically input square and append to input below (same as 8be77c9e)
  [ '846bdb03' ],  // hard: rotate shape 180 degrees, surround with vertical bars, shrink grid to fit
  [ '8be77c9e' ],  // mirror flip vertically input square and append to input below (same as 6fa7a44f)
  [ 'c9e6f938' ],  // mirror flip horizontally input square and append to input to the right (same as 6d0aefbc)
  [ 'e98196ab' ],  // overlay bottom of input onto top, ignoring grey line in the middle (is there a separator)?
  [ 'f8ff0b80' ]   // find non-black colors, order them by number of squares of each into output 1x3 column
]

AllInputCellsBlack 2 [
[ '28e73c20' ],  //  AllInputColumnsEqual, AllInputRowsEqual (obviously)  green spirals
[ '6f8cd79b' ]   //  AllInputColumnsEqual, AllInputRowsEqual (obviously)  InputAndOutputGridsHaveTheSameDimensions; adds light blue border to each;
]

AllOutputCellsTheSameColor 14 [  // So task becomes to isolate the color, determine what's special about it
  [ '1190e5a7' ],   // solved purely by noting colors: input 2 colors, output one the two colors,
  [ '23b5c85d' ],   // output same size and color of one of the shapes of the input; output is all one color
  [ '27a28665' ],   // configuration of black cells codes for output color
  [ '445eab21' ],   // boundary color of largest hollow rectangle in input determines uniform color of output
  [ '44f52bb0' ],   // black-red-red or vice-versa in a row or a column codes ad orange; red black red as blue  (alternating patterns)
  [ '5582e5ca' ],   // color the output cells with whatever color we have the most cells of in the input
  [ 'b9b7f026' ],   // color the output cells with the color of the border of the only hollow shape/ black shape in rectangle
  [ 'd631b094' ],   // output color of only non-black color in the input
  [ 'd9fac9be' ],   // output color is fill color of square
  [ 'de1cd16c' ]    // color of region with the most noise dots
]

InputGridScaledUpByIntegerFactor 20 [
  [ '007bbfb7' ],  // entire input replicated in output in same orientation & size, and in a fractal way; input and output monocolor
  [ '10fcaaa3' ],  //
  [ '3af2c5a8' ], [ '4522001f' ],
  [ '46442a0e' ], [ '469497ad' ],
  [ '46f33fce' ], [ '539a4f51' ],
  [ '62c24649' ], [ '67e8384a' ],
  [ '7fe24cdd' ], [ '91413438' ],
  [ '9172f3a0' ], [ 'ac0a08a4' ],
  [ 'b91ae062' ], [ 'c3e719e8' ],
  [ 'c59eb873' ], [ 'cce03e0d' ],
  [ 'd13f3404' ], [ 'f5b8619d' ]
]


AllInputAndOutputCellsOneColorOrBlack 30 [  // in essence, they are all b&w puzzles
  [ '007bbfb7' ],  // scale up by 1.5, change color, add first of two shapes to bottom
  [ '1cf80156' ],  // output random snipped out of input: remove all black-only rows and columns
  [ '25ff71a9' ],  // InputAndOutputGridsHaveTheSameDimensions:  make last row the first row
  [ '28bf18c6' ],  // strip all black rows & columns from input, then duplicate remainder horizontally
  [ '3af2c5a8' ],  // horizontal, vertical & horizontal+vertical reflections of input full shape added to output
  [ '42a50994' ],  // strip out lonely colored cells
  [ '53b68214' ],  // add initial shape to end of input to flesh out the output; find minimum repeating shape
  [ '5c2c9af4' ],  // find center lonely dot, draw progressively larger squares, the first one bounded by outer dots
  [ '623ea044' ],  // draw longest diagonals possible through lonely dot
  [ '6e19193c' ],  // draw diagonals out of notched 2x2s; InputAndOutputGridsHaveTheSameDimensions
  [ '7ddcd7ec' ],  // extend diagonals from lonely dots around square;  detect diagonals in output
  [ '7f4411dc' ],  // denoise: remove lonely dots with 5 or more black cells surrounding it
  [ '80af3007' ],  // remove all-black rows columns; look for scaled version in output; stack in its own shape
  [ '88a62173' ],  // find out-man-out shape
  [ '8be77c9e' ],  // reflect vertically and add to bottom: rows scaled x2, columns held 1x; inputs squares
  [ '8d5021e8' ],  // reflect horizontally leftward, then remainder vertically up and down
  [ '8eb1be9a' ],  // find replicas of input shape in output; place copies of shape every 3 ticks along vertical axis
  [ '8f2ea7aa' ],  // remove all black rows and columns;  place copies in output in relative positions of colored cells
  [ '91413438' ],  // count copies of input shape in output; compare to #colored cells in shape;
  [ 'a3df8b1e' ],  // pong along diagonals all the way up
  [ 'bbc9ae5d' ],  // inputs all single row; row becomes first row of output (OutputRowMatchAnyRowsOfTheInput) which adds rows as step increases
  [ 'bc1d5164' ],  // slide bottom up two, slide left over 4, keep only top right 3x3
  [ 'c9e6f938' ],  // reflect and place to right
  [ 'd0f5fe59' ],  // count the number of shapes and place that number of blue cells down the diagonal
  [ 'd631b094' ],  // count colored squares and create a row with that many cells of the color
  [ 'ded97339' ],  // connect lonely cells that can be combined by a vertical or horizontal line
  [ 'ea786f4a' ],  // run black diagonals away from center black square
  [ 'eb281b96' ],  // very tricky mosaic patterns with vertical reflections with bottom row as axis
  [ 'ed36ccf7' ],  // 270 deg rotations
  [ 'f25fbde4' ]   // remove black rows and columns, then double what remains in both dimensions
]

AllInputAndOutputCellsTwoColorsOrBlack 27 [
  [ '05f2a901' ], // slide red over to blue along easiest dimension;
  [ '0a938d79' ], // find lonely dots; extend them into lines along shortest dimension; alternate lines, with spacing between first two lines
  [ '1bfc4729' ], // find lonely dots; are they part of shape in output? (yes); draw that shape, using lonely dot's color
  [ '1e32b0e9' ], // find shape in top left of tick tack toe; add it with the other color to all other ttt cells, only overwriting black
  [ '3906de3d' ], // slide red lines into slots in blue holes above them
  [ '3befdf3e' ], // swap colors; add center shape along boundary connecting with 2 cells
  [ '3f7978a0' ], // remove columns with no gray; remove rows with no gray or blues attached to gray
                //  although seeing if output shape lives in input would help narrow it
                //  then must characterize output:
                    - has same number of gray cells as input
                    - all corner cells are light blue
                    - right and left borders are non-black
                // so is there a region, output sized, in input, with blue corners, all the grey cells
  [ '447fd412' ],
  [ '4938f0c2' ],
  [ '496994bd' ],
  [ '5168d44c' ],
  [ '6d58a25d' ],
  [ '7468f01a' ],
  [ '760b3cac' ],
  [ '928ad970' ],
  [ '963e52fc' ],
  [ '98cf29f8' ],
  [ 'a48eeaf7' ],
  [ 'b527c5c6' ],
  [ 'b7249182' ],
  [ 'ba97ae07' ], [ 'cce03e0d' ],
  [ 'dc433765' ], [ 'e5062a87' ],
  [ 'e9afcf9a' ], [ 'ecdecbb3' ],
  [ 'f15e1fac' ]
]
